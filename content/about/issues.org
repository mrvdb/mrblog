#+TITLE: Issue list for mrblog.nl
#+LAYOUT: page
#+OPTIONS: todo:t
#+SEQ_TODO: TODO | DONE CANCELLED(@)


Because everything is orgmode now, I might as well keep an issue list for the site and publish
it. Managing todo items is pretty well covered in org-mode ;-)

#+COMMENT: Leave the indents of the headers as they are below
#+COMMENT: it affects rendering on site and I dont have a good way of doing this with css
**** Current issues
***** DONE Improve rendering of this TODO list                                    :improve:
     :PROPERTIES:
     :CREATED:  [2015-03-21 za 12:25]
     :END:
***** TODO Configure multiple output formats for mrblog.nl blog postings            :build:
     :PROPERTIES:
     :CREATED:  [2015-03-18 wo 09:58]
     :END:

     Now all source is valid org-mode we have a plethora of nice options:
     - deliver original source format (org-mode)
     - pdf format        (for printing)
     - openoffice format (for additional editing)
     - plain text format (for email)
     - activitystreams for listings (connect to mastodon)

     +In the jekyll spirit, this should really all be generated statically and published in the same way as org->html For the latter we use org-ruby.+ Using hugo now

     See also: https://github.com/fauno/jekyll-pandoc-multiple-formats
***** TODO merge git ancestry
:PROPERTIES:
:CREATED:  [2020-11-18 wo 17:22]
:END:
This will be a bit tricky, as the original git has two unfinished branches and quite a few of untracked files which should be tracked.

[2020-11-20 vr] Just created a new repository for now, might merge later
***** TODO assess generate vs webserver config
:PROPERTIES:
:CREATED:  [2020-11-18 wo 17:24]
:END:
For example the aliases generate directories, which is a bit messy on the server side, but leaves stuff in control locally. //

Is ther anything special in the webserver config now? I recall there being some aliases and redirects.

- old /feed is now /index.xml
- /category is rewritten to /tag
- cors header is added
-
***** TODO CSS changes to do
:PROPERTIES:
:CREATED:  [2020-11-16 ma 10:47]
:END:
- +titles blue+
- +tags smaller+
- +drop shadow for the images, taking the auto resize of the theme into account+
- make use of the icon font (calendar and home icon)
- +restyle main titles, should be more condensed, see old site+
- +mail icon for about is not very fitting+

***** TODO remove some whitespace from the list of toots
:PROPERTIES:
:CREATED:  [2020-11-18 wo 12:57]
:END:
***** TODO replace boost/favourite texts with icons
:PROPERTIES:
:CREATED:  [2020-11-18 wo 12:57]
:END:
***** TODO Do not render /tags or make it the tag cloud
:PROPERTIES:
:CREATED:  [2020-11-19 do 17:18]
:END:
It is the normal list page now
***** Remnants from earlier iterations
****** TODO Move comment system to something static                                :build:
     :PROPERTIES:
     :CREATED:  [2015-03-19 do 14:58]
     :END:
     To keep with the spirit of a Jekyll site, comments should really be
     static as well.
****** TODO Create a better way for handling remote images                         :build:
     :PROPERTIES:
     :CREATED:  [2015-03-19 do 15:23]
     :END:

     Similar to the gmg plugin, but more generic. Goal is to have a
     quick way to insert a properly styled image, based on a class or keyword.
****** TODO Make pages searchable                                                    :fix:
:PROPERTIES:
     :CREATED:  [2015-03-19 do 15:28]
     :END:
****** CANCELLED Make collections searchable                                         :fix:
:PROPERTIES:
     :CREATED:  [2015-03-19 do 15:27]
     :END:
:LOGBOOK:
- State "CANCELLED"  from "TODO"       [2020-11-20 vr 13:41] \\
  Replaced with hugo, search is different now
:END:
     I think only posts are now handled by the search plugin
****** CANCELLED Adapt gmg preset to fetch small image and load large with lytebox :improve:
     :PROPERTIES:
     :CREATED:  [2015-03-20 vr 16:12]
     :END:
:LOGBOOK:
- State "CANCELLED"  from "TODO"       [2020-11-20 vr 14:44] \\
  Not using gmg anymore.
:END:
***** After deployment
:PROPERTIES:
:CREATED:  [2020-11-19 do 17:37]
:END:
****** TODO add search functionality
:PROPERTIES:
:CREATED:  [2020-11-14 za 18:10]
:END:

https://gohugo.io/tools/search/


https://gist.github.com/eddiewebb/735feb48f50f0ddd65ae5606a1cb41ae looks ok-ish


The basic method is the same, generate some data file to query with client side code. Typically a json file.
While this is fine for small sites, this doesn't scale very well, the json file gets loaded completely for every search. At some point a smarter solution is needed.

In terms of implementation, typically some template is constructed, which is then generated alongside the pages, uploaded so the client side code can access it.

fuse.js gets the most votes

The theme I am using is planning an implementation for search in their 2.0 version which may be fine to wait for.
****** TODO integrate existing comments
:PROPERTIES:
:CREATED:  [2020-11-18 wo 17:21]
:END:

They are not on site right now. But I have json exports from the disqus days.

No need to do this directly, but I don want to save the data.

I like the idea of staticman although i do not want to rely on github for the comments, I think it is possible to self host, but this may be quite a bit of work. Probably postponing.

I also like the idea of having the comments on a social site, and not having them directly on the blog itself, but that has a few nicknacks as well. I haven't seen an implementation yet which I liked.

****** TODO When viewing a post, show related in the sidebar
:PROPERTIES:
:CREATED:  [2020-11-18 wo 11:07]
:END:
****** TODO look at automatically minifying
:PROPERTIES:
:CREATED:  [2020-11-19 do 11:14]
:END:
I think there is a section in the documentation about the hugo pipe which may be related to this? Ideally this should be an option in the staging/production environment to set
****** TODO After deploy: reorganize content files
:PROPERTIES:
:CREATED:  [2020-11-19 do 11:24]
:END:
There are a couple of folders below content which shouldn't really be there. The files folder should be examined and most of the files should probably move to its relevant document / posting where the post is converted to a page bundle. The downside is that the filesystem will then be littered with all these files and it will be hard to optimize for them or move them to a CDN if needed.
****** TODO Extend the deployment script
:PROPERTIES:
:CREATED:  [2020-11-18 wo 17:24]
:END:

hugo deploy does only supports some cloud services, so i just need some sort of script to rsync the whole shebang.

Options:

1. rsync script to sync .site dir

   This is basically what the old site did, manual action, no frills. Good way to start I guess.

2. Use ansible for deployment

   Another option is to use an ansible script which can do the rsync, but also help configure the webserver and other things that may help manage the deployment.

3. Post receive hook on server

   An alternative deploy option could be a post-receive hook on the server side, this means only git and editor is enough to publish content, instead of hugo/git/rsync

   The site would then run a script after each push, taking care of updating the site on the right location on the server. An extra pro is that the amount of content that needs to go over the connection is probably a lot less (although rsync should be fairly efficient in just transferring the differences to what has already been published)
***** TODO This would be useful to have when writing longer documents
:PROPERTIES:
:CREATED:  [2020-11-20 vr 15:04]
:END:
https: [[https://github.com/martignoni/hugo-notice][martignoni/hugo-notice: A Hugo theme component to display nice notices]]
***** DONE Find some sort of automated link checker                                 :build:
:PROPERTIES:
:CREATED:  [2015-03-20 vr 16:13]
:END:
For now, using muffet on the command line and manually correcting. What I want is semi-automated processing on publish where links are marked as dead by css for example

***** DONE Move this TODO in site
:PROPERTIES:
:CREATED:  [2020-11-19 do 11:24]
:END:

There is an issue list, so merge it with that ( and provide a bit better styling for TODO items
***** DONE Set mimetype at server for orgmode files
     :PROPERTIES:
     :CREATED:  [2016-08-02 di 18:04]
     :END:
     What should that be?


     * DONE replace #tags: with #tags[]: in org files
:PROPERTIES:
:CREATED:  [2020-11-14 za 18:09]
:END:

this can be automated
***** DONE dates meta is all wrong
:PROPERTIES:
:CREATED:  [2020-11-14 za 18:10]
:END:
***** DONE codestyling is incomplete, some style are invisible
:PROPERTIES:
:CREATED:  [2020-11-14 za 18:32]
:END:

This is caused by having '=' inline code in the orgmode format

https://github.com/chipzoller/hugo-clarity/pull/85

***** DONE frontpage should display full content for a number of postings
:PROPERTIES:
:CREATED:  [2020-11-14 za 18:30]
:END:
***** DONE read a bit more about configuration
:PROPERTIES:
:CREATED:  [2020-11-14 za 18:28]
:END:
***** DONE get the gpx component working in hugo, probably needs a plugin of some sort
:PROPERTIES:
:CREATED:  [2020-11-14 za 18:31]
:END:

***** DONE improve shadow of content images
:PROPERTIES:
:CREATED:  [2020-11-17 di 13:56]
:END:

I want basically a shadown for pictures which are content of their own, but I dont want a shadow if the image is supporting the text flow, like in the bitcoin article.

This can probably be done along the way, but it should be very easy to include

Current situation:
- when just linking to an image file, the filename will be the caption and the image will have a shadow
- it makes sense to define some classes so the can just set that.
  - ns :: no shadow
  - fl :: float left
    fr :: float right
***** DONE do i want the toml, i think i prefer yaml
:PROPERTIES:
:CREATED:  [2020-11-14 za 18:28]
:END:
***** DONE configure the social icons
:PROPERTIES:
:CREATED:  [2020-11-14 za 18:10]
:END:

- i basically want the url copy, mastodon
***** DONE get the social timeline plugin back on to the frontpage
:PROPERTIES:
:CREATED:  [2020-11-14 za 18:31]
:END:

Why do I want this actually? It is not adding anything useful for the reader other than seeing what I am reading on my mastodon account.

***** DONE logo/siteicon etc
:PROPERTIES:
:CREATED:  [2020-11-14 za 18:11]
:END:
***** DONE move over about page
:PROPERTIES:
:CREATED:  [2020-11-14 za 18:27]
:END:

In the theme now, while it is a content page in my old site. I think hugo calls this a page bundle.

- added layout=page new template and adjustment for pages
-

What I want:
- [X] /about the content of the about page, not listed in rss or other stuff
- [X] /about/issues.html or /about/issues which shows the issues page

The first is easy, but I can't get the second one to work
***** DONE remove/disable the boilerplate content
:PROPERTIES:
:CREATED:  [2020-11-14 za 18:28]
:END:
***** DONE configure archetypes
:PROPERTIES:
:CREATED:  [2020-11-18 wo 12:46]
:END:
This is just needed when using the cli interface, with hugo new?
***** DONE adjust social line to home line instead of my line?
:PROPERTIES:
:CREATED:  [2020-11-18 wo 12:51]
:END:
***** DONE make sure the taxonomy is configured properly
:PROPERTIES:
:CREATED:  [2020-11-14 za 18:28]
:END:

We just need tags at first. Series sounds like something what would work if the subsite multisite idea does not work out, but for now, just tags is sufficient

***** DONE get katex locally?
:PROPERTIES:
:CREATED:  [2020-11-16 ma 10:46]
:END:

It is a function I do not use much, so I am postponing this for now.
***** DONE Build the group by year template
:PROPERTIES:
:CREATED:  [2020-11-16 ma 14:48]
:END:
***** DONE on the archive page some posts are double
:PROPERTIES:
:CREATED:  [2020-11-18 wo 17:29]
:END:

Which was correct, the content files were double too, fixed now.
***** DONE /archive needs a link
:PROPERTIES:
:CREATED:  [2020-11-18 wo 19:15]
:END:
***** DONE look at the robots.txt file
:PROPERTIES:
:CREATED:  [2020-11-18 wo 18:02]
:END:
***** Generic tasks
:PROPERTIES:
:Group: Hobbies
:END:

****** TODO Pullquote needs to be reimplemented for                                :build:
:PROPERTIES:
:CREATED:  [2016-04-08 vr 12:29]
:END:

Perhaps use a functionField for this, this allows for the syntax

#+BEGIN_SRC haskell
$somefunction("String argument")$
#+END_SRC

in templates. This function is defined in a context like

#+BEGIN_SRC haskell
postCtx :: Context String
postCtx = functionField "somefunction" (\args _ -> error $ show args) <> defaultContext
#+END_SRC

which will just print the arguments while compiling the templates.

An example for pullquote might be:

#+BEGIN_SRC example
$pullquote("right", "Paragraph with {marker that signals begin and} marker that signals end")$

Resulting rendering mockup:
"Paragraph with marker that signals beging and maker that signals end"
                                 "...marker that signals begin and..."

#+END_SRC

In html this needs to happen:

#+BEGIN_SRC html
  <span class="pullquote-right" data-pullquote="...marker that signals begin and...">

    Paragraph with marker that signals begin and marker that signals end
  </span>
#+END_SRC

And the CSS can take care of the actual rendering.
****** TODO Show post titles in prev/next links                                    :build:
:PROPERTIES:
:CREATED:  [2016-08-01 ma 14:39]
:END:
****** TODO Gitactivity needs to be reimplemented                                  :build:
:PROPERTIES:
:CREATED:  [2016-04-08 vr 12:30]
:END:
****** TODO Have =/tag= hold a tag cloud                                             :build:
:PROPERTIES:
:CREATED:  [2016-04-08 vr 12:31]
:END:
****** TODO Generate multiple versions for each post                               :build:
:PROPERTIES:
:CREATED:  [2016-04-08 vr 12:32]
:END:
This is now relatively easy.
Minimal set: source+html

- [X] source
- [X] html
- [ ] pdf
- [ ] epub

And provide some icon after the title or on the same line as the
****** TODO Replace feed with my own template                                        :fix:
:PROPERTIES:
:CREATED:  [2016-04-08 vr 13:53]
:END:
Problem:
- the updated field is a bit special, but i can copy code from
****** TODO Implement the projects or subblog functionality                        :build:
:PROPERTIES:
:CREATED:  [2016-08-01 ma 12:58]
:END:
- http://ur1.ca/pj76y has an example implementation
- using categories ?

****** TODO Implement automatic linkchecker for mrblog.nl
:PROPERTIES:
:CREATED:  [2013-06-28 vr 06:24]
:END:
 Perhaps a cron job which does this.
 - only report what can be fixed by me;
 - report only if there is something to be fixed;
 - check daily

There is a =check= command for hakyll which does link checking. The
question is if we can react to this while building the site, for
example by striking through the text and altering the link to
something else.
****** TODO Find out how we can do subsites with subdomains while keeping the main site the same
:PROPERTIES:
:CREATED:  [2013-06-28 vr 08:12]
:END:
Usecase: cobra.mrblog.nl content is now also on mrblog.nl tagged with
'cobra'

****** TODO Once subdomain stuff is working, we should probably expose that structure through a new front page
:PROPERTIES:
:CREATED:  [2013-06-28 vr 08:12]
:END:
****** Thoughts on having a commenting system
The site is using disqus now, which is comfortable, but a proprietary
solution.

******* Requirements
- based on open source solutions only
- multiple interfaces (web, mail, xmpp etc.)
- static rendering of pages must be preserved (TODO: clarify this in
  relation to on-site rendering with javascript)
- authentication not needed, anyone may comment --> thus moderation
- plain text storage (git based would be nice)

Note: staticman.net more or less satisfies all criteria.

******* Workflow
Someone visits a page, wants to make a comment. There is *one* thing
that user wants to do and that is fill a field with their
comments. Extensive login and identification procedures are just
getting in the way.
What they will be prepared to do is easy identification, so they are
credited with the comment or are able to follow the thread of
discussion.

******* Viable options
- use gnu-social (non-static)
- use pump.io (non-static)
- homebrew js only solution
- staticman.net :: automated solution to post files to git repository,
                   which then can be picked up by the site compiler
******* Scenario: using pump.io
The first assumption I am going to make is that there is a pump.io
note somewhere, i will be using:

http://qua.name/mrb/note/gtOv6E2aSle9P2jMOGlUKA

as the example. The comments to that note are considered comments to
the posting on the website.
Using the assumption the task can be split into the following
sub-parts:
1. Displaying the comments in the relevant page
2.

******** Ad 1. Displaying comments for a specific note
The note displayed above can be had with a json representation like
so:

http://qua.name/api/note/gtOv6E2aSle9P2jMOGlUKA

Complications:
- that url requires a logged in user, so we need to log in /something/
  to be able to view the comments, this can be a dummy user, so this
  is probably not that big of a problem
- the web url mentioned in the beginning *is* available without
  authentication.
The replies specifically for that note are at:

http://qua.name/api/note/gtOv6E2aSle9P2jMOGlUKA/replies

Host information is at:

http://qua.name/.well-known/host-meta

Registering an app delivered:
#+BEGIN_SRC js
  {
      "client_id":"Is4xR0ErDe9_INvSo2Cz8Q",
      "client_secret":"pk8oh4uk0E03iHsCyXd7_GqxBcb-auLsW7Y0gDCsje8",
      "expires_at":0
  }
#+END_SRC

According to the API document almost all API endpoints require user
authorization. For the activity outbox 2-legged authentication (no
user authentication needed) is possible, so we may be able to reach
this data.

This means, given that I want a static solution at the site, I either
need:
1. a secure js solution to use oauth
2. an oauth proxy

Using an oauth proxy displaying could be done as:
1. using the endpoint to get the replies of an object, fetch the json
   async;
2. loop over the replies, using jquery templates for example and
   deliver a dom fragment to be rendered.
******* Scenario: using staticman.net
I've begun implementing staticman.net usage. This is a log of that
effort

First step: getting the data
----------------------------
The current commenting system is disquss and they offer an export
which dumps all comments into a proprietary xml file.

I converted this xml file to a representation in json with [[https://github.com/Cheedoong/xml2json][xml2json]] to
get the data in json format. Reason is that the staticman
implementation directly produces json too, so I'm trying to mimick
that. The reason I chose for staticman.net to produce json over yaml
is that I already use json data for the site search /engine/ on the
blog.

The first idea was to extract a json file for every comment from the
xml file and use that directly on site with a javascript piece to
bridge it to rendering.

Extracting the json file per comment is done with =jq= in a number of
distinct steps (basically for loops). While tedious to do, it's
scripted and now a reproduceable step.

*************** TODO The messages sometimes hold html, do we want to keep this?       :check:
It seems to be only <p> tags mostly, so I guess we can clean it a bit.
*************** END

Having separate files for each comment is less suitable for web
exposure, because they can only be accessed by their URI. This means
that their filenames must be known for them to be rendered by the
browser. Gathering these filenames by hakyll or combining them into
one 'well-known' file is then the next step.

Choosing them to be gathered into one well-known filename is attractive
because it fits nicely with the techniques already in use on my
blog. The output of hakyll is a directory per post/page which
contains, so far, 1 file per format of the content. (.html and .org so
far) With that one file in place, a piece of client side code can then
be written to render the page based on that file.

So, first goal is to have in the directory:
  - blog-slug.html :: the html page that is rendered
  - blog-slug.org  :: the original content
  - blog-slug.json :: data related to the page (comments, other
                      metadata?)

It's fairly trivial to also include the blog contents into the =.json=
file also. In fact this might be a good starting point.


****** Multisites
I want to host multiple blogs below mrblog.nl, like:
- (me.)mrblog.nl   :: main blog, having all content
- cobra.mrblog.nl  :: the cobra build
- hbx360.mrblog.nl :: cazeneuve hbx360 related stuff
- sacia.mrblog.nl  :: sacia shaper related stuff
- photo.mrblog.nl  :: photoblog (sparse subset of media.mrblog.nl)
- tools.mrblog.nl  :: tools in general
- media.mrblog.nl  :: mediastorage for all mrblog.nl sites (mediagoblin)

The hosting of sub-blogs is probably quite easy to do by defining to
publish them to subdirectories and make sure they are self-sufficient,
meaning they have an index.html file there.

One way to help with this is to use categories which are a bit
special:
- /work/code/_posts/blahblah.md -> post is in cats work and code and if
  the permalink variable contains :categories the live site will
  contain folders for the categories.
- categories variable in front matter: YAML list or space separated
  string; this just registers the category and makes the variables work.

I like the specification of categories and blogs to be separate
really, but file organisation above _posts is unavoidable to get them
into categories so might as well use that to my advantage

Another option could be to have a data file below _data which contains
information on the sub-blogs.

In URI terms this would be:
1. http://mrblog.nl :: main blog, containing everything
2. http://mrblog.nl/cobra  :: everything in http://cobra.mrblog.nl
3. http://mrblog.nl/hbx360 :: everything in http://hbx360.mrblog.nl
4. These should all be the same:
   1. http://cobra.mrblog.nl/2013/11/15/the-title-of-the-post.html
   2. http://mrblog.nl/cobra/2013/11/15/the-title-of-the-post.html
   3. http://mrblog.nl/2013/11/15/the-title-of-the-post.html

Item 4.3 is now in place. 4.2 is not really necessary

Items 2. and 3. more or less dicate there should be folders in the
sources named =cobra= and =hbx360= which have their own
=index.html=

Using a make/rake file different config files per site in the same
directory (basically making multiple jekyll runs) is possible but
seems a bit sensitive for conflicts. So, trying to avoid that is worth
something.

Some things (like having cobra.mrblog.nl serve up from a cobra
(virtual) subdirectory can be arranged from nginx.

Jekyll 2.0 adds a notion of /collections/ which are like pages (not
time based content like posts) gathered in a /_collection/ directory,
exposed in a =/collection= url part. They can be made to render
(treated as an input format to be transformed) or just plain copied.

[2017-01-14 za] As I'm progressing I'm more and more leaning towards
one base domain (https://mrblog.nl in this case) and have features in
the blog system to define my tags categories and what have we. This
makes everything a lot simpler and probably more flexible.
******* Requirements
- [X] each subsite has its own feeds under its own domain
- [ ] links in the feed point to the proper subdomain
- [ ] main site has all content of all subsites, properly tagged and
  least, preferably categorized too
- [ ] everything can be generated and previewed as if it was one site
- [ ] if resources are duplicated, the process to manage them should be
  automated.
- [ ] if not a separate theme, show the use that he is on a sub-blog.
- [ ] http://sub.mrblog.nl/YYYY/MM/DD/title.html point to proper contents
- [ ] http://mrblog.nl/sub/YYYY/MM/DD/title.thml point to proper contents
- [X] http://mrblog.nl/YYY/MM/DD/title.html points to proper contents
- [ ] a simple mechanism is in place for local testing.
-

******* References
- http://maximebf.com/blog/2013/07/multi-site-jekyll/
- http://www.garron.me/en/blog/multi-blog-site-jekyll.html

******* Implementation
Taking photo.mrblog.nl as example, the steps to implement it are as follows.

- The source documents are in folders sites/blog1,
sites/blog2... etc. This makes sure the documents are in categories
automatically which we can filter on.
Example: ./sites/photo/*.org  contains documents for
http://photo.mrblog.nl The index.html loops over all content which is
in category 'photo'. In addition, cross-blog posting can be done by
setting the category in the frontmatter manually.
- nginx points photo.mrblog.nl to ./photo as root dir
-

Given the amount of time I already spent on this, perhaps a separate
subblog with syndication approach is simpler (it is).
****** Blog article ideas
******* TODO Consider a blog series on yubikey applications                       :write:
:PROPERTIES:
:CREATED:  [2015-07-21 Tue 10:27]
:END:

Series:
Authenticating:
---------------
- OTP usage (with and without running own validation server)
- FIDO U2F (only google uses this?)
- OATH (use android as example, compare with google  auth app)
- OpenPGP usage (gnupg, ssh, firefox, openkeychain, pass, password
  store)
- PIV (no usecase found yet)

Encrypting
----------
- OpenPGP
- PIV
******* TODO Blog about the conflict of being open source and having 'next new features' :write:
:PROPERTIES:
:CREATED:  [2014-12-23 di 17:47]
:END:
****** TODO Create an anonymous blog, as some sort of game. "Find out who I am"    :build:
:PROPERTIES:
:CREATED:  [2013-06-17 ma 11:41]
:END:

Needs:
- reliable TOR network access
- anonymous email
- encrypted connections to everywhere
- damage controle system (assume new identity quickly when exposure
  signs are there)
- think about how
- http://ur1.ca/ecl5w has some good information
- the idea of findingout who I am is for play, it is not enough that
  people "know" who I am, but they need a record of how they find
  out. (I even consider spilling my identity upfront but that would
  make it much less interesting)
- researching the HOWTO is already leaking information, so the first
  and foremost action is to get access to the TOR network completely.

Recently acquired book from Mitnick may help with this.
